var DIRECTION = { UP: 1, DOWN: 2, LEFT: 3, RIGHT: 4 }, DropdownNavigation = function (t, i) { i || (i = {}); var e = document.querySelector(t); e ? (this.isShort = e.classList.contains("-short"), this.header = e, this.navigationLinks = e.querySelectorAll(".navigation__link[data-nav-dropdown]"), this.navigationLinkWrapper = e.querySelector(".horizontalNavigation"), this.mobileNavToggle = e.querySelector("#mobileNavToggle"), this.dropdownWrapper = e.querySelector(".navigation__dropdown__wrapper"), this.featuredBackground = e.querySelector(".navigation__dropdown__featured-background"), this.indicator = e.querySelector(".navigation__link-indicator"), this.scrim = document.querySelector(".navigation__scrim"), this.footer = e.querySelector(".navigation__dropdown__footer"), this.topbar = document.querySelector(".topbar"), this.dropdowns = {}, this.activeDropdownId = null, this.previousActiveDropdownId = null, this.closeTimer = null, this.closeTimerDelay = i.closeTimerDelay || 100, this.drawerCloseTimer = null, this.drawerTimerDelay = i.drawerTimerDelay || 400, this.redrawDelay = 16, this.triggerMode = i.triggerMode || "click", this.mobileOpen = !1, this.isMobile = window.innerWidth < this.mobileThreshold, this.wasMobile = window.innerWidth < this.mobileThreshold, this.mobileThreshold = 1120, this.isScrolling = !1, this.isScrollLocked = !1, this.toggleDropdown = function (t, i) { var e; if ("string" == typeof t ? e = t : t instanceof Element ? e = t.id : t instanceof Event && (t.preventDefault(), t.stopPropagation(), e = t.target.dataset.navDropdown, i = 0 === t.detail), !this.dropdowns[e]) return Bugsnag.notifyException("DropdownNavigation.toggleDropdown() was called with " + e + ", which is not a valid dropdown id."), !1; this.wasMobile = this.isMobile, this.isMobile = window.innerWidth < this.mobileThreshold, this.activeDropdownId === e ? this.closeDropdown(!1) : this.openDropdown(e, i) }, this.toggleMobileMenu = function () { this.wasMobile = this.isMobile, this.isMobile = !0, this.mobileOpen ? (this.mobileOpen = !1, this.previousActiveDropdownId = this.activeDropdownId, this.activeDropdownId = null) : this.mobileOpen = !0, this.updateActiveClasses() }, this.openDropdown = function (t, i) { var e = this.dropdowns[t].dropdown; if (!e) return Bugsnag.notifyException("DropdownNavigation.openDropdown() was called with " + t + ", which is not a valid dropdown id."), !1; this.previousActiveDropdownId = this.activeDropdownId, this.activeDropdownId = t, this.updateActiveClasses(), i ? e.querySelector(".navigation__dropdown__item a").focus() : document.activeElement instanceof Element && document.activeElement.blur() }, this.closeDropdown = function (t) { this.previousActiveDropdownId = this.activeDropdownId, this.activeDropdownId = null, this.updateActiveClasses(), !this.previousActiveDropdownId && this.isMobile || (t ? this.dropdowns[this.previousActiveDropdownId].link.focus() : document.activeElement instanceof Element && document.activeElement.blur()) }, this.updateActiveClasses = function () { var t = this.dropdowns[this.previousActiveDropdownId] || null, i = this.dropdowns[this.activeDropdownId] || null; t && (t.dropdown.setAttribute("aria-hidden", "true"), t.dropdown.classList.remove("-active"), t.link.setAttribute("aria-expanded", "false"), t.link.classList.remove("-active")), i && (i.dropdown.setAttribute("aria-hidden", "false"), i.dropdown.classList.add("-active"), i.link.setAttribute("aria-expanded", "true"), i.link.classList.add("-active"), this.activateSections(this.activeDropdownId, this.previousActiveDropdownId)), i && !this.isMobile && (this.openDrawer(), this.setFeaturedBackgroundPosition(this.activeDropdownId, this.previousActiveDropdownId)), !i && t && (this.footer.setAttribute("aria-hidden", "true"), this.scrim.classList.remove("-active"), this.deactivateSections(this.previousActiveDropdownId, DIRECTION.UP)), i || !t || this.isMobile || (this.closeDrawer(), this.drawerCloseTimer && clearTimeout(this.drawerCloseTimer), this.drawerCloseTimer = setTimeout(function () { this.header.classList.remove("-dropdown-active") }.bind(this), this.drawerTimerDelay)), i && !t && (this.header.classList.add("-dropdown-active"), this.footer.setAttribute("aria-hidden", "false")), !i || t || this.isMobile || this.scrim.classList.add("-active"), this.isMobile ? this.setFeaturedBackgroundPosition(null, null) : (this.moveLinkIndicator(this.activeDropdownId, this.previousActiveDropdownId), this.unlockScroll()), this.isMobile && !this.mobileOpen && this.navigationLinkWrapper && (this.navigationLinkWrapper.classList.remove("-active"), this.mobileNavToggle.classList.remove("-active"), this.unlockScroll(), this.drawerCloseTimer && clearTimeout(this.drawerCloseTimer), this.drawerCloseTimer = setTimeout(function () { this.header.classList.remove("-dropdown-active") }.bind(this), this.drawerTimerDelay), this.closeDrawer()), this.isMobile && this.mobileOpen && this.navigationLinkWrapper && (this.header.classList.add("-dropdown-active"), this.navigationLinkWrapper.classList.add("-active"), this.mobileNavToggle.classList.add("-active"), this.dropdownWrapper.classList.add("-active"), this.lockScroll(), this.setPrecedingLinkClass(), this.openDrawer()) }, this.lockScroll = function () { this.isScrollLocked = !0, document.getElementsByTagName("html")[0].classList.add("-no-scroll") }, this.unlockScroll = function () { this.isScrollLocked = !1, document.getElementsByTagName("html")[0].classList.remove("-no-scroll") }, this.toggleScrollLock = function () { this.isScrollLocked ? this.unlockScroll() : this.lockScroll() }, this.activateSections = function (t, i) { if (i !== t) { var e, o = this.dropdowns[t].sections, s = this.calculateDirection(t, i); switch (i && this.deactivateSections(i, s), s) { case DIRECTION.LEFT: e = "translateX(-30px)"; break; case DIRECTION.RIGHT: e = "translateX(30px)"; break; case DIRECTION.UP: e = "translateY(30px)"; break; case DIRECTION.DOWN: default: e = "translateY(-30px)" }o.forEach(function (t, i) { t.style.transition = "none", t.style.transform = e, setTimeout(function () { t.style.transition = "", t.style.transform = "", t.style.transitionDelay = 50 * i + (s === DIRECTION.DOWN ? 200 : 100) + "ms", t.classList.add("-active") }, this.redrawDelay) }.bind(this)) } }, this.calculateDirection = function (t, i) { if (t && !i) return DIRECTION.DOWN; if (!t && i) return DIRECTION.UP; if (this.isMobile) return DIRECTION.DOWN; var e = Object.keys(this.dropdowns).indexOf(t); return Object.keys(this.dropdowns).indexOf(i) < e ? DIRECTION.RIGHT : DIRECTION.LEFT }, this.deactivateSections = function (t, i) { this.dropdowns[t].sections.forEach(function (t) { if (t.classList.remove("-active"), i) switch (t.style.transition = "transform 120ms cubic-bezier(1, 0.01, 1, 0.99), opacity 120ms cubic-bezier(1, 0.01, 1, 0.99)", i) { case DIRECTION.LEFT: t.style.transform = "translateX(20px)"; break; case DIRECTION.RIGHT: t.style.transform = "translateX(-20px)"; break; case DIRECTION.DOWN: t.style.transform = "translateY(20px)"; break; default: case DIRECTION.UP: t.style.transform = "translateY(-20px)" } }) }, this.setPrecedingLinkClass = function () { var t = this.header.querySelector(".-preceding"); t && t.classList.remove("-preceding"); var i = Object.keys(this.dropdowns), e = this.dropdowns[i[i.indexOf(this.activeDropdownId) - 1]]; e && e.link.classList.add("-preceding") }, this.hoverSections = function (t) { this.dropdowns[t].sections.forEach(function (t) { t.classList.add("-hovered") }) }, this.unHoverSections = function (t) { this.dropdowns[t].sections.forEach(function (t) { t.classList.remove("-hovered") }) }, this.openDrawer = function () { var t; t = this.isMobile ? "100%" : this.calculateDrawerHeight(), this.dropdownWrapper.classList.add("-active"), this.setDrawerHeight(t) }, this.closeDrawer = function () { this.dropdownWrapper.classList.remove("-active"), this.setDrawerHeight(0) }, this.calculateDrawerHeight = function (t) { var i = t || this.activeDropdownId; if (!i || !this.dropdowns[i]) return 0; var e = this.footer.clientHeight, o = this.header.clientHeight, s = this.dropdowns[i].dropdown.clientHeight; return Math.min(s + e + o, window.innerHeight) }, this.setDrawerHeight = function (t) { this.dropdownWrapper.style.transition = "", "number" == typeof t && (t += "px"), requestAnimationFrame(function () { this.dropdownWrapper.style.transform = "translateY(" + t + ")" }.bind(this)) }, this.closeDrawer = function () { this.dropdownWrapper.style.transition = "transform 300ms cubic-bezier(1, 0.01, 1, 0.99), opacity 450ms cubic-bezier(1, 0.01, 1, 0.99)", this.dropdownWrapper.style.transform = "translateY(0)", this.dropdownWrapper.classList.remove("-active") }, this.setFeaturedBackgroundPosition = function (t, i) { if (!t) return this.featuredBackground.style.transition = "none", void (this.featuredBackground.style.transform = "none"); var e = this.dropdowns[t].featuredSectionList, o = e ? window.innerWidth - e.getBoundingClientRect().left : 0; i || (this.featuredBackground.style.transition = "none", requestAnimationFrame(function () { this.featuredBackground.style.transition = "" }.bind(this))), this.featuredBackground.style.transform = "translateX(" + -o + "px)" }, this.moveLinkIndicator = function (t, i) { if (!t && !i) return this.indicator.style.transition = "none", void (this.indicator.style.transform = "translateX(0) scaleX(0)"); var e = this.dropdowns[t || i].linkText.getBoundingClientRect(), o = e.left, s = t ? e.width / 100 : 0; i ? this.indicator.style.transform = "translateX(" + o + "px) scaleX( " + s + ")" : (this.indicator.style.transition = "none", this.indicator.style.transform = "translateX(" + o + "px) scaleX(0)", setTimeout(function () { this.indicator.style.transition = "", this.indicator.style.transform = "translateX(" + o + "px) scaleX( " + s + ")" }.bind(this), this.redrawDelay)) }, this.recalculateLayout = function () { if (this.wasMobile = this.isMobile, this.isMobile = window.innerWidth < this.mobileThreshold, this.isMobile !== this.wasMobile) return this.mobileOpen = !1, this.closeDropdown(), void this.closeDrawer(); !this.isMobile && this.activeDropdownId && (this.setDrawerHeight(this.calculateDrawerHeight()), this.setFeaturedBackgroundPosition(this.activeDropdownId), this.moveLinkIndicator(this.activeDropdownId)) }, this.focusColumn = function (e) { var t = document.activeElement.parentElement; if (t.classList.contains("navigation__dropdown__item")) { var o = t.parentElement, s = this.dropdowns[this.activeDropdownId].columns, n = 0; Array.prototype.forEach.call(s, function (t, i) { o === t && (e === DIRECTION.RIGHT && (n = i === s.length - 1 ? 0 : i + 1), e === DIRECTION.LEFT && (n = 0 === i ? n = s.length - 1 : i - 1)) }), s[n].querySelector("a").focus() } }, this.focusItem = function (e) { var o = document.activeElement.parentElement; if (o.classList.contains("navigation__dropdown__item")) { var s = o.parentElement.parentElement.querySelectorAll(".navigation__dropdown__item"), n = 0; Array.prototype.forEach.call(s, function (t, i) { o === t && (e === DIRECTION.DOWN && (n = i === s.length - 1 ? 0 : i + 1), e === DIRECTION.UP && (n = 0 === i ? n = s.length - 1 : i - 1)) }), s[n].querySelector("a").focus() } }, this.queueDropdownClose = function () { this.closeTimer = setTimeout(this.closeDropdown.bind(this), this.closeTimerDelay) }, this.cancelDropdownClose = function () { this.closeTimer && clearTimeout(this.closeTimer) }, this.calculateScrollClasses = function () { var t = window.pageYOffset || document.documentElement.scrollTop, i = 0; if (this.topbar && this.topbar.classList.contains("-is-active") && (i = this.topbar.clientHeight), i < t) { if (this.isScrolling) return; this.isScrolling = !0, this.header.classList.add("-is-scrolling") } else this.isScrolling = !1, this.header.classList.remove("-is-scrolling") }, this.initResourceClasses = function () { var t = this.header.querySelector(".navigation__dropdown__resource-card"); t && t.closest(".navigation__dropdown__column").classList.add("-resource-card-column") }, this.bindDropdownListeners = function () { var t, i; for (t = 0; t < this.navigationLinks.length; t++) { var e = (i = this.navigationLinks[t]).dataset.navDropdown, o = document.querySelector("#" + e), s = o.querySelectorAll(".navigation__dropdown__section"), n = o.querySelectorAll(".navigation__dropdown__column"), r = o.querySelector(".navigation__dropdown__featured-section-list"), a = i.querySelector(".navigation__link-text"), d = this; "hover" === this.triggerMode && (o.addEventListener("mouseenter", this.cancelDropdownClose.bind(this)), o.addEventListener("mouseleave", this.queueDropdownClose.bind(this)), this.dropdownWrapper.addEventListener("mouseenter", this.cancelDropdownClose.bind(this)), this.dropdownWrapper.addEventListener("mouseleave", this.queueDropdownClose.bind(this))); for (var c = [], l = 0; l < s.length; l++)c.push(s[l]); Array.prototype.forEach.call(s, function (t) { var i = { dropdownId: e }; t.addEventListener("mouseenter", function () { d.hoverSections(this.dropdownId) }.bind(i)), t.addEventListener("mouseleave", function () { d.unHoverSections(this.dropdownId) }.bind(i)) }.bind(this)), this.dropdowns[e] = { dropdown: o, sections: c, columns: n, featuredSectionList: r, link: i, linkText: a }, i.addEventListener("mousedown", function (t) { t.preventDefault() }), "hover" === this.triggerMode ? (i.addEventListener("mouseleave", this.queueDropdownClose.bind(this)), i.addEventListener("blur", this.queueDropdownClose.bind(this)), i.addEventListener("mouseenter", function (t) { var i = t.target.dataset.navDropdown; this.openDropdown(i), this.cancelDropdownClose() }.bind(this)), i.addEventListener("focus", function (t) { var i = t.target.dataset.navDropdown; this.openDropdown(i, !0), this.cancelDropdownClose() }.bind(this))) : i.addEventListener("click", this.toggleDropdown.bind(this)) } "click" === this.triggerMode && this.scrim.addEventListener("click", function () { this.closeDropdown(!1) }.bind(this)), this.mobileNavToggle && this.mobileNavToggle.addEventListener("click", this.toggleMobileMenu.bind(this)), window.addEventListener("resize", this.recalculateLayout.bind(this)), document.addEventListener("keydown", function (t) { if (this.activeDropdownId) switch (t.key) { case "ArrowRight": t.preventDefault(), this.focusColumn(DIRECTION.RIGHT); break; case "ArrowLeft": t.preventDefault(), this.focusColumn(DIRECTION.LEFT); break; case "ArrowDown": t.preventDefault(), this.focusItem(DIRECTION.DOWN); break; case "ArrowUp": t.preventDefault(), this.focusItem(DIRECTION.UP); break; case "Escape": this.closeDropdown(!0) } }.bind(this)) }, this.init = function () { this.calculateScrollClasses(), this.isShort || (this.initResourceClasses(), this.bindDropdownListeners()) }) : Bugsnag.notifyException('DropdownNavigation was initialized with the selector "' + t + '", which did not exist in the DOM at the time of initialization') }; window.addEventListener("load", function () { window.nav = new DropdownNavigation(".siteHeader"), window.nav.init(), window.addEventListener("scroll", function () { window.nav.calculateScrollClasses() }) });